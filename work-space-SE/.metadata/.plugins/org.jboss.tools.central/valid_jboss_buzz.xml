<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title type="html">The unbundling of the tech stack</title><link rel="alternate" href="http://www.ofbizian.com/2023/01/the-unbundling-of-tech-stack.html" /><author><name>Unknown</name></author><id>http://www.ofbizian.com/2023/01/the-unbundling-of-tech-stack.html</id><updated>2023-01-03T10:53:00Z</updated><content type="html">As the field of IT continually evolves, there is a constant stream of new software architectures, development techniques, and tools. Some examples of these include microservices, micro frontends, zero trust, service mesh, and data mesh, you mesh it. Despite the apparent diversity of these technologies and approaches, they are all connected by a common trend: the unbundling of technology stacks and teams. This trend involves breaking down systems into smaller, independent components and organizing work into smaller, more focused teams in order to achieve greater flexibility, and modularity. The unbundling of the tech stack How come each of these represent unbundling? * Microservices emerged as a response to the limitations of monolithic architecture, which can be inflexible and difficult to scale and maintain as an application grows. By breaking a monolithic application into smaller, independent services, it becomes possible to develop, deploy, and scale each part of the application independently, leading to faster development cycles and greater flexibility. * Hexagonal architecture was developed to improve the flexibility and maintainability of 3-tier applications by decoupling components and providing standardized interfaces for interacting with them. * Domain-driven design (DDD) is a software development approach that can help break down a monolithic application into smaller, loosely-coupled modules that represent different business domains or contexts. * Micro frontends architecture is a design approach in which a large, monolithic frontend application is broken down into smaller, independent modules that can be developed and deployed separately.  * JAMstack decouples the frontend and backend of an application by separating the HTML, CSS, and JavaScript that make up the user interface from the server-side code and databases that power the application, allowing easier maintenance as changes to one part of the system do not necessarily require changes to the other. * A service mesh decouples the networking responsibilities of a distributed application, such as routing, load balancing, and service discovery, from the application itself, allowing developers to focus on building business logic and features without worrying about the underlying network infrastructure. * Similar to microservices, data mesh involves decomposing a large, complex system into smaller, independent components. It decomposes data governance and management practices into smaller, independent components that can be implemented and enforced consistently across different data sources and systems. * The 2 pizza team model is a strategy for organizing teams and work in organizations that advocates for smaller teams able to respond to changes more quickly, have better communication and collaboration, can make faster decisions and solve problems more efficiently. Unbundling technology stacks and teams breaks monolithic systems into smaller, independent components and organizing work into smaller, more focused teams. What do you think is the next area of unbundling? Follow me at  and shout out with any thoughts and comments.</content><dc:creator>Unknown</dc:creator></entry><entry><title type="html">How to configure Java Memory in a Docker Container</title><link rel="alternate" href="http://www.mastertheboss.com/soa-cloud/docker/how-to-configure-java-memory-in-a-docker-container/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/soa-cloud/docker/how-to-configure-java-memory-in-a-docker-container/</id><updated>2023-01-02T15:52:04Z</updated><content type="html">When running a Java application in a Docker container, it is important to properly configure the JVM memory settings. This is essential to ensure that the application has enough memory to run correctly. If you don’t specify a value for the --memory flag when starting a Docker container, the container will be given an automatic ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title type="html">Solving java.lang.OutOfMemoryError: java heap space</title><link rel="alternate" href="http://www.mastertheboss.com/java/solving-java-lang-outofmemoryerror-java-heap-space/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/java/solving-java-lang-outofmemoryerror-java-heap-space/</id><updated>2023-01-02T14:30:07Z</updated><content type="html">This article goes through the most common Java OutOfMemory Error, which happens when you saturate the Java Heap Memory. Within this article we will show how to fix this error depending if you are an application user or an application developer. The Java Heap Space is the area of memory where the Java objects reside. ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>C# 11: pattern matching and static abstract interfaces</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/01/02/c-11-pattern-matching-and-static-abstract-interfaces" /><author><name>Tom Deseyn</name></author><id>4f024a24-5255-40c8-bba9-8febb532f05e</id><updated>2023-01-02T07:00:00Z</updated><published>2023-01-02T07:00:00Z</published><summary type="html">&lt;p&gt;This is the second article of our series about C# 11, the new major version of the C# programming language. The first article discussed new features, including raw strings, required members, and auto-default structs. In this article, we will describe improvements in pattern matching, and then we'll look at static abstract interfaces and how they enable generic math.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Follow the C# 11 series:&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Part 1: &lt;a href="https://developers.redhat.com/articles/2022/11/30/c-11-raw-strings-required-members-and-auto-default-structs#"&gt;Raw strings, required members, and auto-default structs&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 2: Pattern matching and static abstract interfaces&lt;/li&gt; &lt;li&gt;Part 3: &lt;a href="https://developers.redhat.com/articles/2022/01/03/5-new-advanced-features-improving-c-11"&gt;5 new advanced features improving C# 11&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1. New features in pattern matching&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;C# 7 introduced pattern matching. It enables checking if an object instance matches a particular &lt;em&gt;shape&lt;/em&gt;, like a type and property values. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;C# 11 introduces list patterns, which allow matching list elements to patterns.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;In the following example, we match constant patterns with each list element. The list needs three elements for a match: 1, 2, and 3.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;code class="language-cs"&gt;if (integers is [1, 2, 3]) { ... }&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;We can introduce a range pattern (&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;..&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;) to match zero or more elements in the list.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;code class="language-cs"&gt;if (integers is [1, .., 3]) { ... }&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;With this pattern, we specified the first element must be &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;1&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;, the last must be &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;3&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;, and there can be zero or more elements between them with any value.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;It is possible to capture the value of the range by naming it.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;code class="language-cs"&gt;if (integers is [1, .. var middle, 3])&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;To capture the range value, the type needs to support either an indexer operator that accepts a &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;Range&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; or a &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;Slice&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; method that takes two &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;int&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; parameters.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Types like array and span meet these requirements, but &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;List&lt;T&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; does not. So if numbers is a &lt;code&gt;List&lt;int&gt;&lt;/code&gt;, the compiler gives an error like: &lt;code&gt;cannot convert from 'System.Range' to 'int'&lt;/code&gt; as it tries to match with the indexer.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Any existing pattern can be used to match the elements. In the following example, we’re using a property pattern to match with the first element, a discard pattern to ignore the second, and a range pattern to capture the remaining elements.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;code class="language-cs"&gt;if (people is [ { Name: "John" }, _, .. var other]) {  }&lt;/code&gt;&lt;/p&gt; &lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Span to string matching&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;When parsing strings, the most efficient way to represent parts of a string is by using the &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;ReadOnlySpan&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; type: it refers to the original string and doesn't make new allocations to represent the substring.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;As part of the parsing, we may want to check that substring against a known set of literal values.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;C# 11 enables matching &lt;code&gt;[ReadOnly]Span&lt;char&gt;&lt;/code&gt; against a literal string.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;static HttpVerb ParseHttpVerb(ReadOnlySpan&lt;char&gt; verb) =&gt;    verb switch    {        "GET" =&gt; HttpVerb.Get,        "POST" =&gt; HttpVerb.Post,        ...        _ =&gt; HttpVerb.Unknown    };&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Note that this pattern is not supported between &lt;code&gt;[ReadOnly]Span&lt;byte&gt;&lt;/code&gt; and the C# 11’s UTF-8 string literals, which we’ll cover in the next article.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2. Static abstract interface members&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Like other object-oriented programming languages, C# has always supported polymorphism where derived classes implement &lt;code&gt;virtual&lt;/code&gt; or &lt;code&gt;abstract&lt;/code&gt; members of their base classes or interfaces. The member that gets called at runtime depends on the actual type of the instance.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;C# 10 introduced &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;static abstract &lt;/code&gt;&lt;code&gt;interface&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; members. This gives us polymorphism where the method called depends on the compile-time type rather than the runtime instance type.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;The interface members describe the required members for a type, and generic algorithms can be written that work against all types that implement the interface. At compile-time the type used with the algorithm is known so there is no runtime cost.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;For example, we can describe types that need a factory method as follows:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;interface IFactory&lt;T&gt; where T : IFactory&lt;T&gt; {    static abstract T Create(); }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Note the recurring pattern. The type that implements the interface is a generic parameter (&lt;code&gt;&lt;T&gt;&lt;/code&gt;), so we can use it when defining the static members. And a &lt;code&gt;where&lt;/code&gt; clause indicates &lt;code&gt;T&lt;/code&gt; implements the interface.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Similar to default interface methods (added in C# 8), we can also add &lt;code&gt;static virtual&lt;/code&gt; members that have a default implementation. Thanks to the &lt;code&gt;where&lt;/code&gt; constraint on &lt;code&gt;T&lt;/code&gt; these methods can call the other &lt;code&gt;static&lt;/code&gt; members defined by the interface.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;The following method uses the interface we’ve just defined to create an object.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;T CreateObject&lt;T&gt;() where T : IFactory&lt;T&gt; {    return T.Create(); }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Types that implement the interface need to provide the &lt;code&gt;static&lt;/code&gt; members it defines.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;class MyClass : IFactory&lt;MyClass&gt; {    public static MyClass Create() =&gt; new MyClass(); }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;We can now call &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;CreateObject&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; with this type.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;var instance = CreateObject&lt;MyClass&gt;();&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;The following section describes how this powers .NET 7’s generic math feature.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;How static abstract interfaces enable generic math feature&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Built on the &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;static abstract&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;interface&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; members described in the previous section, .NET 7 comes with a set of interfaces in &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;System.Numerics&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; that describe numeric types. Though this is not a C# feature, we’ll look at it as an interesting use case of &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;static abstract&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; members.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Let’s take a closer look at two of these interfaces:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;public interface INumberBase&lt;TSelf&gt; : IAdditionOperators&lt;TSelf, TSelf, TSelf&gt;, ...    where TSelf : INumberBase&lt;TSelf&gt;? {    static abstract TSelf One { get; }    ... public interface IAdditionOperators&lt;TSelf, TOther, TResult&gt;    where TSelf : IAdditionOperators&lt;TSelf, TOther, TResult&gt;? {    static abstract TResult operator +(TSelf left, TOther right);    ...&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;The &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;INumberBase&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; type is a base interface. In the code snippet, you can see it has a member named &lt;code&gt;One&lt;/code&gt; that represents the value of &lt;code&gt;1&lt;/code&gt; for the type. The type supports operations also described as interfaces, like the &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;IAdditionOperators&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; which defines the &lt;code&gt;+&lt;/code&gt; operation. A generic algorithm can require these granular interfaces on the generic type, allowing it to work with a larger set of types.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;C# base numeric types such as &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;int&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; and &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;double&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; implement these interfaces.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;public struct Int32 : ISignedNumber&lt;int&gt;, IMinMaxValue&lt;double&gt;, ... public struct Double : IBinaryFloatingPointIeee754&lt;double&gt;, , IMinMaxValue&lt;double&gt;, ...&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Both of these types implement the &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;INumberBase&lt;T&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; we’ve shown earlier (and &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;INumber&lt;T&gt;&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;, which we’ll use next).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Before C# 11, there was no way to write an algorithm that worked against &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;int&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; and &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;double&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;. Thanks to these interfaces, we can now do that:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;Add(1, 2); Add(1.0, 2.0); T Add&lt;T&gt;(T lhs, T rhs) where T : INumber&lt;T&gt;   =&gt; lhs + rhs;&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Checked mathematical operators&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;C# 11 supports implementing separate checked and unchecked variants of mathematical operators to provide the generic math feature. As a reminder: &lt;em&gt;unchecked&lt;/em&gt; means the operator doesn't throw when the result can't be represented (like with an overflow), and &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;conversely &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;em&gt;checked&lt;/em&gt; means it throws.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;A separate checked operator can be defined using the &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;checked&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; keyword as follows:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;public static T operator +(T lhs, T rhs) {...} public static T operator checked +(T lhs, T rhs) {...} … // similar for other operators.&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;By default, C# projects are unchecked, so if you’re implementing a &lt;code&gt;checked&lt;/code&gt; operator, you may want to enable checking by wrapping the code in a block with the &lt;code&gt;checked&lt;/code&gt; keyword. Then it applies to the operators you use in the implementation method.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;C# 11 new features: More to come &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;In this article, we looked at the new features in pattern matching. We also described how &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;code&gt;static abstract&lt;/code&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; members enable type-level polymorphism and how they enable the generic math feature. Stay tuned for more about the new features of C# 11 in the final article in this series. Please comment below if you have questions. We welcome your feedback.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/01/02/c-11-pattern-matching-and-static-abstract-interfaces" title="C# 11: pattern matching and static abstract interfaces"&gt;C# 11: pattern matching and static abstract interfaces&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Tom Deseyn</dc:creator><dc:date>2023-01-02T07:00:00Z</dc:date></entry><entry><title type="html">How to access Keycloak H2 Database</title><link rel="alternate" href="http://www.mastertheboss.com/keycloak/how-to-access-keycloak-h2-database/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/keycloak/how-to-access-keycloak-h2-database/</id><updated>2023-01-01T11:54:06Z</updated><content type="html">Keycloak stores its data in an embedded H2 database by default, which is a lightweight and easy-to-use database that ships in the the Keycloak distribution. In this article, we will discuss how to access the Keycloak H2 database and perform common tasks such as deleting an user. By the end of this article, you will ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>How to install Red Hat Ansible Automation Platform on RHEL 9</title><link rel="alternate" href="https://developers.redhat.com/articles/2023/01/01/how-install-red-hat-ansible-automation-platform-rhel-9" /><author><name>Nagesh Rathod</name></author><id>e42fc84d-3b5f-4827-acc3-e9932a935c74</id><updated>2023-01-01T07:00:00Z</updated><published>2023-01-01T07:00:00Z</published><summary type="html">&lt;p&gt;The &lt;a href="https://developers.redhat.com/products/ansible/overview"&gt;Red Hat Ansible Automation Platform&lt;/a&gt; is a comprehensive solution that helps you &lt;a href="https://developers.redhat.com/topics/automation"&gt;automate&lt;/a&gt; collaboratively. In this article, you will learn how to install Ansible Automation Platform 2.2 on &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux 9&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Get the Ansible Automation Platform software&lt;/h2&gt; &lt;p&gt;Download Ansible Automation Platform 2.2 for RHEL using &lt;a href="https://developers.redhat.com/products/ansible/download"&gt;this link&lt;/a&gt; and extract it. Upon extraction, you will see the following files:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;[user@user ~ ]$ ls bundle collections fake-inv group_vars images inventory licenses README.md setup.log setup.sh&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Configure the Ansible inventory file&lt;/h2&gt; &lt;p&gt;The Ansible inventory file contains details about the database, credentials for PostgreSQL and Ansible, etc. For our example, we will create a single node inventory file for the Ansible Automation Platform.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt; [automationcontroller] fqdn ansible_connection=local [database] [all:vars] admin_password='redhat' pg_host='' pg_port='' pg_database='awx' pg_username='awx' pg_password='redhat'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is a sample file; please update the parameters to match your environment.&lt;/p&gt; &lt;h2&gt;Ansible Automation Platform installation&lt;/h2&gt; &lt;p&gt;To install Ansible Automation Platform on RHEL, execute the file &lt;code&gt;setup.sh&lt;/code&gt; in the terminal in the same directory where you have extracted the setup files.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;sudo ./setup.sh&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;Using /etc/ansible/ansible.cfg as config file [WARNING]: running playbook inside collection ansible.automation_platform_installer [DEPRECATION WARNING]: "include" is deprecated, use include_tasks/import_tasks instead. This feature will be removed in version 2.16. Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg. PLAY [Warn if no core component is enabled] ************************************ TASK [Warn if no core component is enabled] ************************************ skipping: [localhost] =&gt; {"changed": false, "skip_reason": "Conditional result was False"} [WARNING]: Could not match supplied host pattern, ignoring: tower [WARNING]: Could not match supplied host pattern, ignoring: automationhub [WARNING]: Could not match supplied host pattern, ignoring: automationcatalog [WARNING]: Could not match supplied host pattern, ignoring: execution_nodes [WARNING]: Could not match supplied host pattern, ignoring: sso PLAY [Group all valid hosts for AAP installation] ****************************** TASK [Gathering Facts] ********************************************************* ok: [pqdn] TASK [group hosts used in AAP installer] *************************************** ok: [pqdn] =&gt; {"add_group": "aap_valid_hosts", "changed": false, "parent_groups": ["all"]} PLAY [aap_valid_hosts] ********************************************************* TASK [ansible.automation_platform_installer.check_config_static : Ensure SSO node is run on a RHEL 8 node] *** skipping: [pqdn] =&gt; {"changed": false, "skip_reason": "Conditional result was False"} TASK [ansible.automation_platform_installer.check_config_static : Ensure expected variables are defined] *** skipping: [pqdn] =&gt; (item=tower_package_name) =&gt; {"ansible_loop_var": "item", "changed": false, "item": "tower_package_name", "skip_reason": "Conditional result was False"} skipping: [pqdn] =&gt; (item=tower_package_version) =&gt; {"ansible_loop_var": "item", "changed": false, "item": "tower_package_version", "skip_reason": "Conditional result was False"} TASK [ansible.automation_platform_installer.check_config_static : Ensure cluster hosts are not localhost] *** skipping: [pqdn] =&gt; {"changed": false, "skip_reason": "Conditional result was False"} TASK [ansible.automation_platform_installer.check_config_static : Check that group names do not conflict with instance names] *** skipping: [pqdn] =&gt; {"changed": false, "skip_reason": "Conditional result was False"} TASK [ansible.automation_platform_installer.check_config_static : Detect pre-2.x inventory and offer a migration] *** ok: [pqdn -&gt; localhost] =&gt; {"changed": false, "msg": "Old style inventory not detected, continuing with install"} TASK [ansible.automation_platform_installer.check_config_static : Detect unsupported HA inventory file] *** skipping: [pqdn] =&gt; {"changed": false, "skip_reason": "Conditional result was False"} TASK [ansible.automation_platform_installer.check_config_static : Check that no instance groups are named automationcontroller] *** skipping: [pqdn] =&gt; (item=all) =&gt; {"ansible_loop_var": "item", "changed": false, "item": "all", "skip_reason": "Conditional result was False"} skipping: [pqdn] =&gt; (item=ungrouped) =&gt; {"ansible_loop_var": "item", "changed": false, "item": "ungrouped", "skip_reason": "Conditional result was False"} skipping: [pqdn] =&gt; (item=automationcontroller) =&gt; {"ansible_loop_var": "item", "changed": false, "item": "automationcontroller", "skip_reason": "Conditional result was False"} skipping: [pqdn] =&gt; (item=database) =&gt; {"ansible_loop_var": "item", "changed": false, "item": "database", "skip_reason": "Conditional result was False"} skipping: [pqdn] =&gt; (item=aap_valid_hosts) =&gt; {"ansible_loop_var": "item", "changed": false, "item": "aap_valid_hosts", "skip_reason": "Conditional result was False"} TASK [ansible.automation_platform_installer.check_config_static : Ensure only one database host exists] *** skipping: [pqdn] =&gt; {"changed": false, "skip_reason": "Conditional result was False"} &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Accessing the Ansible Automation Platform Console&lt;/h2&gt; &lt;p&gt;After successful installation, you can access the console of the Ansible Automation platform by visiting the console URL &lt;code&gt;http://localhost&lt;/code&gt; (Figure 1). The username is &lt;code&gt;admin&lt;/code&gt; and the password is what you have defined in the inventory file in the &lt;code&gt;[all:vars]&lt;/code&gt; field.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/fig1_33.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/fig1_33.png?itok=-LpHaOpd" width="600" height="266" alt="Screenshot of the Ansible Automation Platform login page." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: Ansible Automation Platform login page. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;Subscriptions&lt;/h2&gt; &lt;p&gt;You must have valid subscriptions attached before using the Red Hat Ansible Automation Platform (Figure 2). Attaching an Ansible Automation Platform subscription enables automation hub repositories.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/fig2_24.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/fig2_24.png?itok=Ji-EDOeC" width="600" height="186" alt="Screenshot of the Ansible subscription page" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2: Ansible subscription page. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;To log in, use the same credentials you used to download Ansible Automation Platform 2.2. You can &lt;a href="https://docs.ansible.com/automation-controller/latest/html/userguide/import_license.html"&gt;import a subscription&lt;/a&gt;. You can also obtain the &lt;code&gt;pool_id&lt;/code&gt; for your Red Hat Ansible Automation Platform subscription with this command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ subscription-manager list --available --all | grep "Ansible Automation Platform" -B 3 -A 6&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That command will return the following, which verifies Ansible Automation Platform entitlements:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;Subscription Name: Red Hat Ansible Automation, Premium (5000 Managed Nodes) Provides: Red Hat Ansible Engine Red Hat Ansible Automation Platform SKU: MCT3695 Contract: ```` Pool ID: `````````` Provides Management: No Available: 4999&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To attach the subscription, use the &lt;code&gt;attach&lt;/code&gt; option with the &lt;code&gt;subscription-manager&lt;/code&gt; command.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;# subscription-manager attach --pool=&lt;pool_id&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once you've subscribed, the Red Hat Ansible Automation Platform will be attached to all nodes and able to access Automation Hub Repositories. To verify that the subscription was successfully attached, run the list option:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;# subscription-manager list --consumed&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Figure 3 gives you a glimpse of the Ansible Automation Platform web console.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/fig3_13.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/fig3_13.png?itok=eHdQeUSN" width="600" height="285" alt="Screenshot of the Ansible Automation Platform web console." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3: Ansible Automation Platform web console. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;h2&gt;Continue your automation journey with Ansible Automation Platform&lt;/h2&gt; &lt;p&gt;You can get started with the Ansible Automation Platform by &lt;a href="https://developers.redhat.com/products/ansible/getting-started"&gt;exploring interactive labs at Red Had Developer&lt;/a&gt;. Ansible Automation Platform is also available as a managed offering on &lt;a href="https://www.redhat.com/en/technologies/management/ansible/azure"&gt;Microsoft Azure&lt;/a&gt; and as a self-managed offering on &lt;a href="https://www.redhat.com/en/technologies/management/ansible/aws"&gt;Amazon Web Services&lt;/a&gt;.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2023/01/01/how-install-red-hat-ansible-automation-platform-rhel-9" title="How to install Red Hat Ansible Automation Platform on RHEL 9"&gt;How to install Red Hat Ansible Automation Platform on RHEL 9&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Nagesh Rathod</dc:creator><dc:date>2023-01-01T07:00:00Z</dc:date></entry><entry><title type="html">How to create a custom Keycloak Theme</title><link rel="alternate" href="http://www.mastertheboss.com/keycloak/how-to-create-a-custom-keycloak-theme/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/keycloak/how-to-create-a-custom-keycloak-theme/</id><updated>2022-12-31T10:54:11Z</updated><content type="html">Keycloak themes are a powerful way to customize the appearance and behavior of a Keycloak installation. In this article we will learn how to create a custom Keycloak theme with a baisc CSS knowledge. Keycloak Themes in a nutshell Firstly, a Keycloak theme is a set of resources that defines the look and feel of ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title type="html">How to enable Two-factor authentication in Keycloak</title><link rel="alternate" href="http://www.mastertheboss.com/keycloak/how-to-enable-two-factor-authentication-in-keycloak/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/keycloak/how-to-enable-two-factor-authentication-in-keycloak/</id><updated>2022-12-29T10:34:17Z</updated><content type="html">In this article, we will explain how to enable Two Phase Authentication (2FA) with Keycloak. We will learn how to include the 2FA in the standard authentication flow and how to enforce it for a single user. Two-factor authentication (2FA) is an additional layer of security that requires users to provide an additional form of ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title type="html">This Week in JBoss - December, 1st 2022</title><link rel="alternate" href="https://www.jboss.org/posts/weekly-2022-12-29.html" /><category term="quarkus" /><category term="java" /><category term="jakarta ee" /><category term="wildfly" /><category term="ansible" /><category term="keycloak" /><author><name>Romain Pelisse</name><uri>https://www.jboss.org/people/romain-pelisse</uri><email>do-not-reply@jboss.com</email></author><id>https://www.jboss.org/posts/weekly-2022-12-29.html</id><updated>2022-12-29T00:00:00Z</updated><content type="html">&lt;article class="" data-tags="quarkus, java, jakarta ee, wildfly, ansible, keycloak"&gt; &lt;h1&gt;This Week in JBoss - December, 1st 2022&lt;/h1&gt; &lt;p&gt;&lt;em&gt;Happy Holidays!&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Welcome to our last installment of JBoss Editorial for 2022! As we are about to let this year behind us, it’s time to look back and review our biggest achievement of the past twelve months, but also look ahead to 2023 and what is as in store for the JBoss community!&lt;/em&gt;&lt;/p&gt; &lt;p&gt;In the previous years, it was Mark Little who wrote this last editorial, often sharing his thoughts on the JBoss community accomplishments and the exciting challenges of the next year. Needless to say, I have impossible shoes to fill in for here! So, I’m not even trying to :), especially as I certainly don’t have the same overview that Mark has on our industry. Also, I will not list all of the milestones the JBoss community achieve. There were simply too many of them to do so, from &lt;a href="https://quarkus.io/blog/road-to-quarkus-3/"&gt;Quarkus reaching its 200th release and its third major version&lt;/a&gt;, &lt;a href="https://www.wildfly.org/news/2022/11/09/WildFly27-Final-Released/"&gt;Wildfly implementing the latest version of the Jakarta EE specification&lt;/a&gt; or &lt;a href="https://octoverse.github.com/2022/state-of-open-source"&gt;Keycloak named by GitHub one of the top projects in 2022&lt;/a&gt;. The only one I could really discuss is the success of my own personal project, integrating as much as possible the JBoss community famous projects into Ansible (&lt;a href="https://github.com/ansible-middleware/wildfly/"&gt;Wildfly&lt;/a&gt;, &lt;a href="https://github.com/ansible-middleware/infinispan/"&gt;Infinispan&lt;/a&gt;, &lt;a href="https://github.com/ansible-middleware/keycloak"&gt;Keycloak&lt;/a&gt;, and &lt;a href="https://github.com/ansible-middleware/amq"&gt;AMQ&lt;/a&gt;), both upstream (with the collection available on &lt;a href="https://galaxy.ansible.com/search?deprecated=false&amp;#38;keywords=middleware_automation&amp;#38;order_by=-relevance&amp;#38;page=1"&gt;Ansible Galaxy&lt;/a&gt;) and downstream (on &lt;a href="https://console.redhat.com/ansible/automation-hub/?page_size=10&amp;#38;view_type=list&amp;#38;page=1&amp;#38;keywords=redhat%20java"&gt;Ansible Automation Hub&lt;/a&gt; for Red Hat customers). One of those extensions is now even part, as a technical preview feature, of the latest release of &lt;a href="https://developers.redhat.com/articles/2022/12/22/automate-jboss-web-server-deployment-red-hat-certified-content-collection-jws"&gt;Red Hat JWS&lt;/a&gt;! But, once more, this is only one of the numerous achievements of this year.&lt;/p&gt; &lt;p&gt;This short inventory of mine is probably as incomplete as it is biased, but it does make my case: yet again, the JBoss community has been thriving, releasing new version often, and producing quality content (blogs, videos or presentation). I, for one, can’t wait to see what will come out of it next year, and if you are too, well, I have good news. You are already in the right place ;)! The JBoss Editorial will continue and will keep you inform, as much as we can, of everything happening!&lt;/p&gt; &lt;p&gt;&lt;em&gt;That’s all folks! Please join us again in two weeks for another installment of our JBoss editorial!&lt;/em&gt;&lt;/p&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/romain-pelisse.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Romain Pelisse&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;</content><dc:creator>Romain Pelisse</dc:creator></entry><entry><title type="html">Understanding JPA Entity life cycle</title><link rel="alternate" href="http://www.mastertheboss.com/java-ee/jpa/understanding-jpa-entity-life-cycle/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/java-ee/jpa/understanding-jpa-entity-life-cycle/</id><updated>2022-12-28T11:24:50Z</updated><content type="html">This article discusses the life cycle of Entity objects in JPA Applications. Understanding the different stages that an Entity goes through is crucial for proper understanding of the JPA framework. The JPA Entity Lifecycle refers to the stages that an entity (a Java object representing a database record) goes through during its existence in a ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry></feed>
